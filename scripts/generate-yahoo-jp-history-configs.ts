#!/usr/bin/env tsx

import * as fs from 'fs';
import * as path from 'path';

interface StockCategory {
  name: string;
  url: string;
  categoryId: string;
}

interface JapanStockCategoriesData {
  "日股分類": StockCategory[];
}

interface ConfigTemplate {
  templateType?: string;
  url: string;
  variables?: Record<string, any>;
  export?: {
    filename?: string;
    [key: string]: any;
  };
  [key: string]: any;
}

// 解析命令行參數
const args = process.argv.slice(2);
const fromDateArg = args.find(arg => arg.startsWith('--from='));
const toDateArg = args.find(arg => arg.startsWith('--to='));
const limitArg = args.find(arg => arg.startsWith('--limit='));

// 設置默認日期範圍：fromDate 為今日前14天，toDate 為今天
const now = new Date();
const fourteenDaysAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);

// 格式化日期為 YYYYMMDD 格式
const formatDate = (date: Date): string => {
  return date.toISOString().split('T')[0].replace(/-/g, '');
};

const fromDate = fromDateArg ? fromDateArg.split('=')[1] : formatDate(fourteenDaysAgo);
const toDate = toDateArg ? toDateArg.split('=')[1] : formatDate(now);
const limit = limitArg ? parseInt(limitArg.split('=')[1]) : undefined; // 默認生成所有股票

console.log('🔍 Yahoo Finance Japan 歷史股價配置生成器');
console.log('=====================================');
console.log(`📅 日期範圍: ${fromDate} -> ${toDate} (14天範圍)`);
console.log(`📊 生成限制: ${limit ? `${limit} 個配置` : '所有股票 (無限制)'}`);

// 讀取模板
const templatePath = path.join(__dirname, '../config/templates/yahoo-finance-jp-history.json');
if (!fs.existsSync(templatePath)) {
  console.log('❌ 找不到歷史股價模板文件:', templatePath);
  process.exit(1);
}

// 讀取日本股票代碼數據
const stockCodesPath = path.join(__dirname, '../data/yahoo-finance-jp-stockcodes.json');
if (!fs.existsSync(stockCodesPath)) {
  console.log('❌ 找不到日本股票代碼數據文件:', stockCodesPath);
  process.exit(1);
}

interface StockCode {
  stockCode: string;
  companyName: string;
  sector: string;
}

const stockCodesData: StockCode[] = JSON.parse(fs.readFileSync(stockCodesPath, 'utf8'));
const template: ConfigTemplate = JSON.parse(fs.readFileSync(templatePath, 'utf8'));

console.log(`📋 讀取到 ${stockCodesData.length} 個日本股票代碼`);

// 從實際股票代碼數據中選取股票代碼
const getStockCodes = (stockData: StockCode[], maxCount?: number): string[] => {
  // 如果沒有指定限制，使用所有股票代碼
  const stockCodes = maxCount 
    ? stockData.slice(0, maxCount).map(stock => stock.stockCode)
    : stockData.map(stock => stock.stockCode);
  
  console.log(`📊 選取了 ${stockCodes.length} 個股票代碼 (包含 .T/.S 後綴)`);
  
  return stockCodes;
};

// 生成配置文件
const generateConfigs = async (): Promise<void> => {
  const stockCodes = getStockCodes(stockCodesData, limit);
  const configsDir = path.join(__dirname, '../config');
  let successCount = 0;
  let errorCount = 0;

  console.log(`🚀 開始生成 ${stockCodes.length} 個歷史股價配置...`);

  for (const symbolCode of stockCodes) {
    try {
      // 創建配置副本
      const config = JSON.parse(JSON.stringify(template));
      
      // 更新配置
      config.variables = {
        ...config.variables,
        symbolCode,
        fromDate,
        toDate,
        page: "1"
      };
      
      // 更新 URL
      config.url = `https://finance.yahoo.co.jp/quote/${symbolCode}/history?from=${fromDate}&to=${toDate}&timeFrame=d&page=1`;
      
      // 更新導出文件名，支援 .T 和 .S 後綴，替換所有變數為實際值
      if (config.export && config.export.filename) {
        config.export.filename = config.export.filename
          .replace('${symbolCode}', symbolCode.replace(/\.(T|S)$/, '_$1'))
          .replace('${fromDate}', fromDate)
          .replace('${toDate}', toDate);
      }
      
      // 更新註釋
      config._note = `JP STOCK HISTORY CONFIG: Auto-generated configuration for ${symbolCode} historical stock price data from ${fromDate} to ${toDate}. Generated by generate-yahoo-jp-history-configs.ts script.`;
      
      // 寫入配置文件，支援 .T 和 .S 後綴
      const configFilename = `yahoo-finance-jp-history-${symbolCode.replace(/\.(T|S)$/, '_$1')}.json`;
      const configPath = path.join(configsDir, configFilename);
      
      fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
      
      successCount++;
      
      if (successCount % 10 === 0) {
        console.log(`✅ 已生成 ${successCount} 個配置...`);
      }
      
    } catch (error) {
      console.error(`❌ 生成 ${symbolCode} 配置時出錯:`, error);
      errorCount++;
    }
  }

  console.log('\n📊 生成結果統計:');
  console.log(`✅ 成功生成: ${successCount} 個配置`);
  console.log(`❌ 生成失敗: ${errorCount} 個配置`);
  console.log(`📁 配置目錄: ${configsDir}`);
  
  if (successCount > 0) {
    console.log('\n🎯 使用方式:');
    console.log('npm run crawl yahoo-finance-jp-history-8105_T');
    console.log('npx tsx src/cli.ts --config config/yahoo-finance-jp-history-7203_T.json');
    console.log('\n📝 批量執行範例:');
    console.log('for file in config/yahoo-finance-jp-history-*.json; do');
    console.log('  echo "Processing $file..."');
    console.log('  npx tsx src/cli.ts --config "$file"');
    console.log('  sleep 10  # 避免頻繁請求');
    console.log('done');
    console.log('\n💡 支援交易所: .T (東京證券交易所), .S (札幌證券交易所)');
  }
};

// 主要函數
const main = async (): Promise<void> => {
  try {
    await generateConfigs();
    console.log('\n🎉 Yahoo Finance Japan 歷史股價配置生成完成！');
  } catch (error) {
    console.error('❌ 生成過程中發生錯誤:', error);
    process.exit(1);
  }
};

// 執行腳本
if (require.main === module) {
  main().catch(console.error);
}

export { main as generateYahooJPHistoryConfigs };